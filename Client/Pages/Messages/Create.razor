@inject IHttpRepository<CreateMessageDto> messageService
@inject IHttpRepository<RegionDto> regionService
@inject ISnackbar snackbarService
<EditForm Model="@model" OnValidSubmit="CreateMessage">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>

                    <MudTextField Label="Name" HelperText="Max. 12 characters" @bind-Value="model.Name"
                        Variant="Variant.Outlined" class="mb-3" For="@(() => model.Name)" />
                    <MudSelect T="string" Label="Type" @bind-Value="model.Type" AnchorOrigin="Origin.BottomCenter"
                        Variant="Variant.Outlined" class="mb-3">

                        @foreach (var type in MessageTypes)
                        {

                            <MudSelectItem Value="@(type)">@type</MudSelectItem>


                        }
                    </MudSelect>
                    <MudTextField Label="Body" Lines="5" HelperText="Max. 50 characters" @bind-Value="model.Body"
                        Variant="Variant.Outlined" class="mb-3" For="@(() => model.Body)" />
                    <MudCheckBox @bind-Checked="@model.Active" Size="Size.Small" Color="Color.Tertiary">Active
                    </MudCheckBox>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@loading" Variant="Variant.Filled"
                        Color="Color.Primary" class="ml-auto">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Register</MudText>
                        }
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Error" Class="ml-1">
                        Reset</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    CreateMessageDto model = new CreateMessageDto();
    bool loading = false;
    [Parameter]
    public EventCallback Messages { get; set; }
    private List<string> MessageTypes = new List<string>(){
"Licence Registration",
"Licence Finished",
"Licence Rejected",
};
    private async Task CreateMessage()
    {
        loading = true;
        Console.WriteLine("Hello");
        //await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully Updated");
        await messageService.Post($"{EndPoints.MessagesEndPoint}", model);
        SnackMessage("Succesfully Saved Record", Severity.Success);
        await Messages.InvokeAsync();
        loading = false;

    }

    private void SnackMessage(string text, Severity type)
    {
        snackbarService.Add(text, type);
    }

}
