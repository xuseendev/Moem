@inject IHttpRepository<CreateLicenceDto> licenceService
@inject IHttpRepository<BaseLookUpDto> lookupService
@inject IHttpRepository<CompanyDto> companyService
@inject IHttpRepository<LicenceTypeDto> licenceTypeService
@inject IHttpRepository<CompanyDto> companyService
@inject IDialogService Dialog
@inject ISnackbar snackbarService
@using System.Globalization;
@inject NavigationManager navManager
    <EditForm Model="SearchCompany" OnValidSubmit="Search">
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <h6 class="overline-title text-primary-alt mb-3">Search Company Information</h6>
   
                    <MudItem xs="12">
                        <MudGrid>
                        
                            <MudItem xs="4">
                                         <MudTextField Label="Company Id" Variant="Variant.Outlined"   @bind-Value="SearchCompany.CompanyId"
                        For="@(() => SearchCompany.CompanyId)" />
                            </MudItem>
                                         <MudItem xs="4">
                                         <MudTextField Label="Company Phone" Variant="Variant.Outlined"  @bind-Value="SearchCompany.Phone"
                        For="@(() => SearchCompany.Phone)" />
                            </MudItem>
                                                      <MudItem xs="4" class="mt-3">
                                 <MudButton Color="Color.Inherit" ButtonType="ButtonType.Submit"  StartIcon="@Icons.Material.Filled.Search" Style="background-color:green;color:white;">
                        Filter
                    </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudCardContent>
            </MudCard>
               </MudItem>
     </EditForm>
               <br>

               
<EditForm Model="@model" OnValidSubmit="CreateLicenceType">
    <DataAnnotationsValidator />
    <MudGrid>
       

                  <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <h6 class="overline-title text-primary-alt ">Company Information</h6>
   
                    <MudItem xs="12">
                        <MudGrid>
                                          <MudItem xs="4">
                                          <MudTextField Label="Company Id" Variant="Variant.Outlined"  Disabled="true" @bind-Value="Company.Id"
                        For="@(() => Company.Id)" />
                            </MudItem>
                            <MudItem xs="4">
                                         <MudTextField Label="Company Name" Variant="Variant.Outlined"  Disabled="true" @bind-Value="Company.Name"
                        For="@(() => Company.Name)" />
                            </MudItem>
                                         <MudItem xs="4">
                                         <MudTextField Label="Company Phone" Variant="Variant.Outlined"  Disabled="true" @bind-Value="Company.TellPhone"
                        For="@(() => Company.TellPhone)" />
                            </MudItem>
                                             <MudItem xs="4">
                                         <MudTextField Label="Company Type" Variant="Variant.Outlined"  Disabled="true" @bind-Value="Company.CompanyType"
                        For="@(() => Company.CompanyType)" />
                            </MudItem>
                                 <MudItem xs="4">
                                         <MudTextField Label="Email" Variant="Variant.Outlined"  Disabled="true" @bind-Value="Company.Email"
                        For="@(() => Company.Email)" />
                            </MudItem>
                                    <MudItem xs="4">
                                         <MudTextField Label="REgion" Variant="Variant.Outlined"  Disabled="true" @bind-Value="Company.Region"
                        For="@(() => Company.Region)" />
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudCardContent>
            </MudCard>
               </MudItem>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    

                         <h6 class="overline-title text-primary-alt mt-5">Licence Information</h6>
                          <MudItem xs="12" class="mb-2">
                        <MudGrid>
                                          <MudItem xs="3">
                                                                                                         <MudSelect Variant="Variant.Outlined" T="int" Label="Licence Type" ValueChanged="value => LicenceOnChange(value)"  AnchorOrigin="Origin.BottomCenter"    For="@(() => model.LicenceTypeId)">
                        @foreach (var licenceType in LicenceTypes)
                        {

                            <MudSelectItem Value="@(licenceType.Id)">@licenceType.Name</MudSelectItem>


                        }
                                                              </MudSelect>
                            </MudItem>
                            <MudItem xs="3">
                                         <MudTextField Label="Term of Licence" Variant="Variant.Outlined"  Disabled="true" @bind-Value="model.TermOfTheLicence"
                        For="@(() => model.TermOfTheLicence)" />
                            </MudItem>
                                         <MudItem xs="3">
          
                              <MudDatePicker Variant="Variant.Outlined" Label="Issue Date"  DateChanged="value => IssueDateOnChange(value)" For="@(() => model.LicenceStartDate)" />
                        
                            </MudItem>
                                                             <MudItem xs="3">
                                         <MudTextField Label="Licence EndDate" Variant="Variant.Outlined"  Disabled="true" @bind-Value="model.LicenceEndDate"
                        For="@(() => model.LicenceEndDate)" />
                        
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12">
                        <MudGrid>
                            <MudItem xs="6">

                          <MudTextField Label="LicenceId" Variant="Variant.Outlined" Disabled="true"  @bind-Value="model.LicenceId"
                        For="@(() => model.LicenceId)" />
                            </MudItem>


                            <MudItem xs="6">
                                                              <MudSelect Variant="Variant.Outlined" T="int" Label="Mineral Type" @bind-Value="model.MineralTypeId" AnchorOrigin="Origin.BottomCenter"    For="@(() => model.MineralTypeId)">
                        @foreach (var type in MineralTypes)
                        {

                            <MudSelectItem Value="@(type.Id)">@type.Name</MudSelectItem>

                        }                                 </MudSelect>
                            </MudItem>
                        </MudGrid>
                    </MudItem>

 
                     <h6 class="overline-title text-primary-alt mt-5">Address Information</h6>
                          <MudItem xs="12" class="mb-1">
                        <MudGrid>
                        

                            <MudItem xs="4" >
                 
                                                                                          <MudSelect Variant="Variant.Outlined" T="int" Label="Region"  ValueChanged="value => RegionOnChange(value)" AnchorOrigin="Origin.BottomCenter" For="@(() => model.RegionId)">

                        @foreach (var region in Regions)
                        {

                            <MudSelectItem Value="@(region.Id)">@region.Name</MudSelectItem>


                        }
                                                              </MudSelect>
                            </MudItem>
                                  <MudItem xs="4">
                     
                                                                                          <MudSelect Variant="Variant.Outlined" T="int" Label="City" ValueChanged="value => CityOnChange(value)" AnchorOrigin="Origin.BottomCenter" For="@(() => model.CityId)">

                        @foreach (var city in Cities)
                        {

                            <MudSelectItem Value="@(city.Id)">@city.Name</MudSelectItem>


                        }
                                                              </MudSelect>
                            </MudItem>
                                            <MudItem xs="4">
                     <MudSelect Variant="Variant.Outlined" T="int" Label="Area" @bind-Value="model.AreaId" AnchorOrigin="Origin.BottomCenter" For="@(() => model.AreaId)">

                        @foreach (var area in Areas)
                        {

                            <MudSelectItem Value="@(area.Id)">@area.Name</MudSelectItem>


                        }
                                                              </MudSelect>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                           <h6 class="overline-title text-primary-alt mt-5">Additional Information</h6>
            <MudItem xs="12">

                                <MudTextField Variant="Variant.Outlined" Lines="5" Label="Description"  @bind-Value="model.Note"
                                    For="@(() => model.Note)" />
                   </MudItem>
                </MudCardContent>
                <MudCardActions class="mt-3">
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@loading" Variant="Variant.Filled"
                        Color="Color.Primary" class="ml-auto">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Register</MudText>
                        }
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Error" Class="ml-1">
                        Reset</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        
    </MudGrid>
</EditForm>


@code {
    CreateLicenceDto model = new CreateLicenceDto();
    private CompanyFilterDto SearchCompany=new CompanyFilterDto();
     private CompanyDto Company =new CompanyDto();
     private List<CompanyDto> ListCompanies=new List<CompanyDto>();
     private LicenceTypeDto LicenceType=new LicenceTypeDto();
         [Parameter] 
    public int? Id { get; set; }
    [Parameter]
    public string ButtonText { get; set; }

    bool loading = false;
    bool searchLoading = false;
    [Parameter]
    public EventCallback Workflows { get; set; }
        private List<string> Types = new List<string>(){
         "Indivudual",
         "Group"
};

  

    private async Task Search(){
         searchLoading = true;
        ListCompanies = await
        companyService.GetAll($"{EndPoints.CompaniesEndPoint}SearchCompanyFilters?companyId={SearchCompany.CompanyId}&phone={SearchCompany.Phone}&name={SearchCompany.Name}");
        searchLoading = false;
        IDialogReference dialog;
        var parameters = new DialogParameters();
        DialogOptions maxWidth = new DialogOptions()
        {
        MaxWidth = MaxWidth.Large,
        FullWidth = true,
        Position = DialogPosition.TopCenter,
        CloseOnEscapeKey = true
        };
        parameters.Add("Companies",ListCompanies);
       var  result=await Dialog.Show<MoeSystem.Client.Pages.Licences.Components.ChooseCompanyList>("Choose Company",parameters, maxWidth).Result;
        if (!result.Cancelled)
        {
            Company = (CompanyDto)(result.Data ?? new CompanyDto());
        }
    }
    private async Task CreateLicenceType()
    {
        loading = true;
        model.CompanyId=Company.Id;
        if(Id==null){

           var licence= await licenceService.PostAsync($"{EndPoints.LicencesEndPoint}GenerateLicence", model);
            SnackMessage("Succesfully Saved Record", Severity.Success);
            navManager.NavigateTo($"/licences/detail/{licence.Id}");
        }else{
             model.Id=Id.Value;
             await licenceService.Update($"{EndPoints.LicencesEndPoint}", model,Id.Value);
        SnackMessage("Succesfully Saved Record", Severity.Success); 
        }
        //await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully Updated");
        await Workflows.InvokeAsync();
        model=new CreateLicenceDto();
       
        loading = false;

    }
     private IEnumerable<BaseLookUpDto> LicenceTypes = new List<BaseLookUpDto>();
     private IEnumerable<BaseLookUpDto> Companies = new List<BaseLookUpDto>();
     private IEnumerable<BaseLookUpDto> MineralTypes = new List<BaseLookUpDto>();

        protected override async Task OnInitializedAsync()
    {
        LicenceTypes = await lookupService.GetAll($"{EndPoints.LicenceTypesEndPoint}LookUp");
        //Companies = await lookupService.GetAll($"{EndPoints.CompaniesEndPoint}LookUp");
        MineralTypes = await lookupService.GetAll($"{EndPoints.MineralTypeEndPoint}LookUp");
        Regions = await lookupService.GetAll($"{EndPoints.RegionEndPoint}LookUp");
    }



    protected async override Task OnParametersSetAsync()
        {
            if(Id.HasValue){
            model=await licenceService.Get($"{EndPoints.LicencesEndPoint}",Id.Value);
            Company.Name=model.CompanyName;
            Company.Name=model.TellPhone;
            }

        }
     private IEnumerable<BaseLookUpDto> Regions = new List<BaseLookUpDto>();
     private IEnumerable<BaseLookUpDto> Cities = new List<BaseLookUpDto>();
     private IEnumerable<BaseLookUpDto> Areas = new List<BaseLookUpDto>();
    private async Task RegionOnChange(int value)
    {
        model.RegionId =value;
        Cities = await lookupService.GetAll($"{EndPoints.CityEndPoint}LookUp/{model.RegionId}");
        
    }
    private async Task CityOnChange(int value)
    {
        model.CityId =value;
        Areas = await lookupService.GetAll($"{EndPoints.AreaEndPoint}LookUp/{model.CityId}");  
    }

     private async Task CompanyOnChange(int value)
    {
        model.CompanyId =value;
        Company=await companyService.Get($"{EndPoints.CompaniesEndPoint}",value);
        
    }


    private void IssueDateOnChange(DateTime? value)
    {
        model.LicenceStartDate =value.Value;
        model.LicenceEndDate=null;
          var days=0;
        switch(LicenceType.LicencePeriodType){
            case "Year":
              Calendar myCal = CultureInfo.InvariantCulture.Calendar;
            days=myCal.GetDaysInYear(value.Value.Year) * LicenceType.LicencePeriod;
            break;
            case "Month":
            days=30 * LicenceType.
            LicencePeriod;
            break;
            case "End Year":
            var endYear = new DateTime(value.Value.Year, 12, 31);
            days=Convert.ToInt32((endYear - value.Value).TotalDays);
            break;
            default:
            days=1 * LicenceType.LicencePeriod;
            break;
        }
        model.LicenceEndDate=model.LicenceStartDate.Value.AddDays(days);
        
    }
    private async Task LicenceOnChange(int value)
    {
        model.LicenceTypeId =value;
        LicenceType=await licenceTypeService.Get($"{EndPoints.LicenceTypesEndPoint}",value); 
        model.TermOfTheLicence=LicenceType.TermOfLicence; 
        model.LicenceStartDate=null;
    }
    private void SnackMessage(string text, Severity type)
    {
        snackbarService.Add(text, type);
    }

}
