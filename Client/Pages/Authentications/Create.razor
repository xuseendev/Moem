
@inject IHttpRepository<ApiUserDto> authService
@inject IHttpRepository<BaseLookUpDto> lookupService
@inject ISnackbar snackbarService
@inject NavigationManager navManager
<EditForm Model="@model" OnValidSubmit="CreateUser">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>

                 

                    <MudItem xs="12">
                        <MudGrid>
                                          <MudItem xs="6">
                  <MudTextField Label="First Name" Variant="Variant.Outlined" HelperText="Max. 12 characters" @bind-Value="model.FirstName"
                        For="@(() => model.FirstName)" />
                            </MudItem>
                                 <MudItem xs="6">
                  <MudTextField Label="Last Name" Variant="Variant.Outlined" HelperText="Max. 12 characters" @bind-Value="model.LastName"
                        For="@(() => model.LastName)" />
                            </MudItem>


              
                        </MudGrid>
                    </MudItem>
                    
        <MudItem xs="12">
                        <MudGrid>
                                          <MudItem xs="6">
                  <MudTextField Label="Email"  Variant="Variant.Outlined" @bind-Value="model.Email"
                        For="@(() => model.Email)" />
                            </MudItem>
                            <MudItem xs="6">

  <MudTextField Label="Tellphone" HelperText="Max. 10 characters" Variant="Variant.Outlined" @bind-Value="model.PhoneNumber"
                        For="@(() => model.PhoneNumber)" />
                            </MudItem>


              
                        </MudGrid>
                    </MudItem>

                            <MudItem xs="12">
                        <MudGrid>
                                          <MudItem xs="6">
                  <MudTextField InputType="InputType.Password" Label="Password"   Variant="Variant.Outlined" @bind-Value="model.Password"
                        For="@(() => model.Password)" />
                            </MudItem>
                            <MudItem xs="6">

  <MudTextField Label="Confirm Password" InputType="InputType.Password" HelperText="Max. 10 characters" Variant="Variant.Outlined" @bind-Value="model.ConfirmPassword"
                        For="@(() => model.ConfirmPassword)" />
                            </MudItem>


              
                        </MudGrid>
                    </MudItem>
                    
                     @* <h6 class="overline-title text-primary-alt mt-2 mb-3">Address Information</h6> *@
                      <MudItem xs="12" class="mb-1">
                        <MudGrid>
                        

                            <MudItem xs="4" >
                 
                                                                                          <MudSelect For="@(() => model.Region)" Variant="Variant.Outlined" T="int" Label="Region"  ValueChanged="value => RegionOnChange(value)" AnchorOrigin="Origin.BottomCenter">

                        @foreach (var region in Regions)
                        {

                            <MudSelectItem Value="@(region.Id)" >@region.Name</MudSelectItem>


                        }
                                                              </MudSelect>
                            </MudItem>
                                  <MudItem xs="4">
                     
                                                                                          <MudSelect For="@(() => model.City)" Variant="Variant.Outlined" T="int" Label="City" @bind-Value="model.City" AnchorOrigin="Origin.BottomCenter">

                        @foreach (var city in Cities)
                        {

                            <MudSelectItem Value="@(city.Id)">@city.Name</MudSelectItem>


                        }
                                                              </MudSelect>
                            </MudItem>
                                        <MudItem xs="4" >
                 
                                                                                          <MudSelect Variant="Variant.Outlined" T="int" Label="User Group"  @bind-Value="model.UserGroupId" AnchorOrigin="Origin.BottomCenter">

                        @foreach (var userGroup in UserGroups)
                        {

                            <MudSelectItem Value="@(userGroup.Id)" >@userGroup.Name</MudSelectItem>


                        }
                                                              </MudSelect>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@loading" Variant="Variant.Filled"
                        Color="Color.Primary" class="ml-auto">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>@ButtonText</MudText>
                        }
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Error" Class="ml-1">
                        Reset</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    ApiUserDto model = new ApiUserDto();
    [Parameter] 
    public string Id { get; set; }=string.Empty;
    [Parameter]
    public string ButtonText { get; set; }
    bool loading = false;
    [Parameter]
    public EventCallback UserEventCallBack { get; set; }
        private List<string> Types = new List<string>(){
"Indivudual",
"Group"
};

        @* protected async override Task OnParametersSetAsync()
        {
            if(!string.IsNullOrEmpty(Id))
            //model=await authService.Get($"{EndPoints.AccountEndPoint}",Id);

        } *@
    
    private async Task CreateUser()
    {
        loading = true;
        Console.WriteLine("Hello");
        //await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully Updated");
        if(string.IsNullOrEmpty(Id)){
        await authService.Post($"{EndPoints.AccountEndPoint}Register", model);
        SnackMessage("Succesfully Saved Record", Severity.Success);

        }else{
            //model.Id=Id;
            //await authService.Update($"{EndPoints.CompaniesEndPoint}",model,Id);
        SnackMessage("Succesfully Updated Record", Severity.Success);

        }
        await UserEventCallBack.InvokeAsync();
        model=new ApiUserDto();
        //navManager.NavigateTo("/companies/detail/{context.Id}");
        loading = false;

    }

     private IEnumerable<BaseLookUpDto> Regions = new List<BaseLookUpDto>();
     private IEnumerable<BaseLookUpDto> Cities = new List<BaseLookUpDto>();
     private IEnumerable<BaseLookUpDto> UserGroups = new List<BaseLookUpDto>();
        protected override async Task OnInitializedAsync()
    {
        UserGroups = await lookupService.GetAll($"{EndPoints.UserGroupEndPoint}LookUp");
        Regions = await lookupService.GetAll($"{EndPoints.RegionEndPoint}LookUp");
     

    }

        private async Task RegionOnChange(int value)
    {
        model.Region =value;
        Cities = await lookupService.GetAll($"{EndPoints.CityEndPoint}LookUp/{model.Region}");
        
    }
 

    private void SnackMessage(string text, Severity type)
    {
        snackbarService.Add(text, type);
    }

}


