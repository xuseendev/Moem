@inject IAuthenticationService authService
@inject IHttpRepository<RolesDto> roleService
@inject IHttpRepository<CreateUserRoleDto> userRoleService
@inject ISnackbar snackbarService
@inject IJSRuntime jsRuntime
@attribute [Authorize(Roles = "Administrator")]



<EditForm Model="@model" OnValidSubmit="CreateUserRoles">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudItem xs="12">
                   <MudGrid>
   
                        <MudItem xs="12">
                    <MudSelect Variant="Variant.Outlined" T="string" Label="Role" class="mb-3" @bind-Value="model.Role"  AnchorOrigin="Origin.BottomCenter"    For="@(() => model.Role)">
                        
                        @foreach (var role in Roles)
                        {
                            <MudSelectItem Value="@(role.Name)">@role.Name</MudSelectItem>
                        }
                    </MudSelect>
                        </MudItem>
                        </MudGrid>
                    </MudItem>
    
            
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@loading" Variant="Variant.Filled"
                        Color="Color.Primary" class="ml-auto">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>@ButtonText</MudText>
                        }
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Error" Class="ml-1">
                        Reset</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>




@code {
    private bool loading=false;
    [Parameter]
    public EventCallback GetProfile { get; set; }
    [Parameter]
    public UserDto User { get; set; }
    [Parameter]
    public List<RolesDto> Roles { get; set; }=new List<RolesDto>();
    protected async override Task OnInitializedAsync()
    {
        Roles=await roleService.GetAll($"{EndPoints.AccountEndPoint}GetRoles");
    }

        [Parameter]
    public string ButtonText { get; set; }
    
    public CreateUserRoleDto model = new CreateUserRoleDto();
    private string message = string.Empty;

    private async Task CreateUserRoles()
    {
         loading = true;
        model.UserId=User.Id;
        await userRoleService.PostAsync($"{EndPoints.AccountEndPoint}AddRoles", model);
        SnackMessage("Succesfully Saved Record", Severity.Success);
        loading = false;

    }

     private void SnackMessage(string text, Severity type)
    {
        snackbarService.Add(text, type);
    }
}
