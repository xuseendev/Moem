@inject IHttpRepository<UserDto> userService
@inject IHttpRepository<RolesDto> rolesService
@inject ISnackbar snackbarService
<EditForm Model="@model" OnValidSubmit="CreateRegion">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>


                    @* <MudCheckBox Size="Size.Small" Color="Color.Tertiary">Active
                        </MudCheckBox> *@
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@loading" Variant="Variant.Filled"
                        Color="Color.Primary" class="ml-auto">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Register</MudText>
                        }
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Error" Class="ml-1">
                        Reset</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    private RolesDto model = new RolesDto();
    private List<RolesDto> Roles { get; set; }
    bool loading = false;
    [Parameter]
    public EventCallback Areas { get; set; }
    [Parameter]
    public UserDto User { get; set; }
    [Parameter]
    public List<string> UserRoles { get; set; }
    private IEnumerable<RegionDto> Regions = new List<RegionDto>();
    private async Task CreateRegion()
    {
        loading = true;
        Console.WriteLine("Hello");
        //await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully Updated");
        await rolesService.Post($"{EndPoints.AccountEndPoint}", model);
        SnackMessage("Succesfully Saved Record", Severity.Success);
        await Areas.InvokeAsync();
        loading = false;

    }
    protected override async Task OnInitializedAsync()
    {
        Roles = await rolesService.GetAll($"{EndPoints.AccountEndPoint}GetRoles");

    }
    private void SnackMessage(string text, Severity type)
    {
        snackbarService.Add(text, type);
    }

}
