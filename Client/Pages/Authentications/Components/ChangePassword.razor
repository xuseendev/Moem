@inject IHttpRepository<ChangePasswordDto> changePasswordService


@inject ISnackbar snackbarService

<EditForm Model="@model" OnValidSubmit="ChangePasswords">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" class="mb-5">Change Password</MudText>
                        <MudItem xs="12">
                    <MudGrid>
                            <MudItem xs="4">
                 <MudTextField Label="Old Password" Variant="Variant.Outlined"  InputType="InputType.Password"
                        @bind-Value="model.OldPassword" For="@(() => model.OldPassword)" />
                            </MudItem>
                            <MudItem xs="4">
   <MudTextField Label="New Password" Variant="Variant.Outlined"  InputType="InputType.Password"
                        @bind-Value="model.NewPassword" For="@(() => model.NewPassword)" />
                            </MudItem>
                              <MudItem xs="4">
                                   <MudTextField InputType="InputType.Password" Label="Confirm Password" Variant="Variant.Outlined" 
                        @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" />
                            </MudItem>
                    </MudGrid>
                        </MudItem>
 
     
                
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@loading" Variant="Variant.Filled"
                        Color="Color.Primary" class="ml-auto">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>@ButtonText</MudText>
                        }
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Error" Class="ml-1">
                        Reset</MudButton>
                </MudCardActions>
                <br>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    [Parameter]
    public string ButtonText { get; set; }
    private ChangePasswordDto model = new ChangePasswordDto();
    private bool loading=false;
    private async Task ChangePasswords()
    {
        loading = true;
        await changePasswordService.PostAsync($"{EndPoints.AccountEndPoint}ChangePassword", model);
        SnackMessage("Succesfully Updated Record", Severity.Success);
        model=new ChangePasswordDto();
        loading = false;
    }

     private void SnackMessage(string text, Severity type)
    {
        snackbarService.Add(text, type);
    }

    class ProjectMilestoneStatus{
        public int Id { get; set; }
        public string Name { get; set; }
    }
}





