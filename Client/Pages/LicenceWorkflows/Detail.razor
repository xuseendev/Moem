@page "/licenceworkflows/detail/{id:int}"
@using MoeSystem.Client.Pages.Licences.Components
@inject ISnackbar snackbarService


@inject IHttpRepository<LicenceWorkFlowDetailDto> licenceWorkflowService
@inject IHttpRepository<LicenceDocumentDetailDto> LicenceDocumentService
@inject IHttpRepository<LicenceDetailDto> licenceService
@inject IDialogService Dialog
@inject NavigationManager navManager

<div class="nk-content-body">
    <div class="nk-block-head nk-block-head-sm">
        <div class="nk-block-between g-3">
            <div class="nk-block-head-content">
                @if (loading) { }
                else
                {
                    <h3 class="nk-block-title page-title">Licence WorkFlow <strong class="text-primary small">=>
                            @Licence.LicenceId</strong></h3>
                    <div class="nk-block-des text-soft">
                        <ul class="list-inline">
                            <li>Licence ID: <span class="text-base">@Licence.Id</span></li>
                            <li>Last Update: <span class="text-base">
                                    @Licence.UpdatedOn.ToString("dd MMM,yyyy hh:mm tt")</span>
                            </li>
                        </ul>
                    </div>
                }
            </div>
            <div class="nk-block-head-content">
                <a href="html/user-list-regular.html" class="btn btn-outline-light bg-white d-none d-sm-inline-flex"><em
                        class="icon ni ni-arrow-left"></em><span>Back</span></a>
                <a href="html/user-list-regular.html"
                    class="btn btn-icon btn-outline-light bg-white d-inline-flex d-sm-none"><em
                        class="icon ni ni-arrow-left"></em></a>
            </div>
        </div>
    </div><!-- .nk-block-head -->
    <div class="nk-block">
        <div class="card">
            <div class="card-aside-wrap">
                <div class="card-content">
                    @if (loading)
                    {

                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />

                    }
                    else
                    {
                        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                            <MudTabPanel Text="Licence" Icon="@Icons.Filled.AccountBox">

                                <LicenceDetail Licence="Licence" />
                                <div class="nk-block">





                                    <div class="nk-divider divider md"></div>
                                    <div class="nk-block">
                                        <div class="nk-block-head nk-block-head-sm nk-block-between">
                                            <h5 class="title">Note</h5>

                                        </div><!-- .nk-block-head -->
                                    <div class="bq-note">
                                            <div class="bq-note-item">
                                                <div class="bq-note-text text-center " style="color: red;">
                                                    <p>@LicenceWorkFlow.Activity. </p>
                                                </div>

                                            </div><!-- .bq-note-item -->
                                        <div class="bq-note-item">
                                                <div class="bq-note-text text-center">
                                                    @if (LicenceWorkFlow.Reject)
                                                    {
                                                        <MudButton Variant="Variant.Filled"
                                                    StartIcon="@Icons.Material.Filled.Check" Color="Color.Success"
                                                    @onclick="@(e => Approve(LicenceWorkFlow.Id,"Reject"))">
                                                            Approve
                                                        </MudButton>
                                                    }
                                                    else
                                                    {
                                                        <AuthorizeView>
                                                            @if (context.User.Identity.Name == LicenceWorkFlow.TaskActualOwner)
                                                            {
                                                                <MudButton Variant="Variant.Filled"
                                                        StartIcon="@Icons.Material.Filled.Check" Color="Color.Success"
                                                        @onclick="@(e => Approve(LicenceWorkFlow.Id,"Approve"))">
                                                                    Approve
                                                                </MudButton>
                                                                <MudButton Variant="Variant.Filled"
                                                        StartIcon="@Icons.Material.Filled.CancelPresentation"
                                                        @onclick="(()=>Reject(LicenceWorkFlow.Id))" Color="Color.Error">
                                                                    Reject
                                                                </MudButton>
                                                                @if (LicenceWorkFlow.WorkFlowName == "Delivered")
                                                                {
                                                                    <MudButton Variant="Variant.Filled" class="ml-1"
                                                        StartIcon="@Icons.Material.Filled.Print" Color="Color.Info"
                                                        Href="@($"/licenceworkflows/print/{Licence.Id}")">
                                                                        Print
                                                                    </MudButton>
                                                                }


                                                            }
                                                        </AuthorizeView>

                                                    }
                                                </div>

                                            </div><!-- .bq-note-item -->
                                    </div><!-- .bq-note -->
                                </div><!-- .nk-block -->
                            </div><!-- .card-inner -->

                        </MudTabPanel>
                            <MudTabPanel Text="Documents" Icon="@Icons.Filled.Article">

                                <LicenceDocuments LicenceId="Licence.Id" DialogOptions="maxWidth"
                                LicenceEventCallBack="GetLicence" />
                            </MudTabPanel>
                            <MudTabPanel Text="Cordinates" Icon="@Icons.Filled.LocationOn">

                                <LicenceCordinates LicenceId="Licence.Id" LicenceEventCallBack="GetLicence" />

                            </MudTabPanel>
                            <MudTabPanel Text="Comments" Icon="@Icons.Filled.InsertComment">

                                <LicenceComments LicenceId="Licence.Id" LicenceEventCallBack="GetLicence" />
                            </MudTabPanel>
                            <MudTabPanel Text="Workflow History" Icon="@Icons.Filled.AccessTimeFilled">

                                <LicenceWorkflows LicenceId="Licence.Id" LicenceEventCallBack="GetLicence" />
                            </MudTabPanel>
                            <MudTabPanel Text="Map Detail" Icon="@Icons.Filled.Map">
                                <MudText>Map Detail Here</MudText>

                            </MudTabPanel>
                            <MudTabPanel Text="Activities" Icon="@Icons.Filled.Psychology">
                                <LicenceLogs LicenceId="Licence.Id" />
                            </MudTabPanel>
                        </MudTabs>
                    }


                </div><!-- .card-content -->

            </div><!-- .card-aside-wrap -->
        </div><!-- .card -->
    </div><!-- .nk-block -->
</div>




@code {
    [Parameter]
    public int Id { get; set; }

    private LicenceWorkFlowDetailDto LicenceWorkFlow = new LicenceWorkFlowDetailDto();
    private LicenceDetailDto Licence = new LicenceDetailDto();

    protected async override Task OnParametersSetAsync()
    {

        await GetLicence();
    }
    private async Task GetLicenceDetail()
    {
        loading = true;
        Licence = await licenceService.Get($"{EndPoints.LicencesEndPoint}GetLicenceDetail/", LicenceWorkFlow.LicenceId);
        loading = false;
    }


    private async Task GetLicence()
    {
        loading = true;
        LicenceWorkFlow = await licenceWorkflowService.Get($"{EndPoints.LicenceWorkflowEndPoint}Details/", Id);
        loading = false;
        await GetLicenceDetail();
    }

    private bool loading = true;




    private string searchLicence = "";

    private LicenceDto selectedLicenceItem = null;


    DialogOptions maxWidth = new DialogOptions()
    {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        Position = DialogPosition.TopCenter,


    };



    private async Task Approve(int id, string type)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to approve these licence?");
        parameters.Add("ButtonText", "Approve");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = Dialog.Show<ConfirmDialog>("Approve", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            System.Console.WriteLine("Hello");
            await licenceWorkflowService.Update(type == "Approve" ? $"{EndPoints.LicenceWorkflowEndPoint}ApproveLicence/"
            : $"{EndPoints.LicenceWorkflowEndPoint}AproveRejectLicence/", null, id);
            snackbarService.Add("Successfully Approved Licence", Severity.Success);
            navManager.NavigateTo(type == "Approve" ? "licenceworkflows/index" : "/licenceworkflows/rejected");
        }
    }

    private async Task Reject(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to reject these licence?");
        parameters.Add("ButtonText", "Reject");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = Dialog.Show<ConfirmDialog>("Reject", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            System.Console.WriteLine("Hello");
            await licenceWorkflowService.Update($"{EndPoints.LicenceWorkflowEndPoint}RejectLicence/", null, id);
            snackbarService.Add("Successfully Approved Licence", Severity.Success);
            navManager.NavigateTo("/licenceworkflows/index");
        }
    }









    private bool FilterLicence(LicenceDto element) => FilterLicence1(element, searchLicence);

    private bool FilterLicence1(LicenceDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LicenceType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}