@page "/licenceworkflows/index"
@inject IJSRuntime jsRuntime
@inject IDialogService Dialog
@inject IHttpRepository<LicenceWorkFlowDto> licenceWorkflowService
@inject HttpInerceptorService _interceptor
@inject ISnackbar snackbarService
@using Licences
@attribute [Authorize]


@implements IDisposable

  <div class="side-app">
					 <!-- CONTAINER -->
					 <div class="main-container container-fluid">
						<!-- PAGE-HEADER -->
						<div class="page-header">
							<div>
								<h1 class="page-title">My Worksheet</h1>
							</div>
							<div class="ms-auto pageheader-btn">
								<ol class="breadcrumb">
									<li class="breadcrumb-item"><a href="javascript:void(0);">Home</a></li>
									<li class="breadcrumb-item active" aria-current="page">Licence Workflow</li>
								</ol>
							</div>
						</div>
                        <div class="col-offset-10 col-md-2 mb-3">
									<div class="btn-list">
										<a href="/licence/create" class="btn btn-primary" >
											<svg xmlns="http://www.w3.org/2000/svg"  class="w-inner-icn text-white" enable-background="new 0 0 24 24" viewBox="0 0 24 24"><path d="M16,11.5h-3.5V8c0-0.276123-0.223877-0.5-0.5-0.5S11.5,7.723877,11.5,8v3.5H8c-0.276123,0-0.5,0.223877-0.5,0.5s0.223877,0.5,0.5,0.5h3.5v3.5005493C11.5001831,16.2765503,11.723999,16.5001831,12,16.5h0.0006104C12.2765503,16.4998169,12.5001831,16.276001,12.5,16v-3.5H16c0.276123,0,0.5-0.223877,0.5-0.5S16.276123,11.5,16,11.5z M12,2C6.4771729,2,2,6.4771729,2,12s4.4771729,10,10,10c5.5202026-0.0062866,9.9937134-4.4797974,10-10C22,6.4771729,17.5228271,2,12,2z M12,21c-4.9705811,0-9-4.0294189-9-9s4.0294189-9,9-9c4.9682617,0.0056152,8.9943848,4.0317383,9,9C21,16.9705811,16.9705811,21,12,21z"></path></svg>
											New Licence
										</a>
										
									</div>
								</div>
						<!-- PAGE-HEADER END -->
                  
        <MudTable Loading="loading" Items="@Workflows" Dense="true" Hover="true" Bordered="true" Striped="true"
            Filter="new Func<LicenceWorkFlowDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
            <ToolBarContent>
                <MudText Typo="Typo.h6">My Tasks</MudText>
                <MudSpacer />

                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Licence Type</MudTh>
                <MudTh>Licence #</MudTh>
                <MudTh>Company</MudTh>
                <MudTh>Mineral Type</MudTh>
                <MudTh>StartedOn</MudTh>
                <MudTh>Task Owner</MudTh>
                <MudTh>Licence Status</MudTh>
                <MudTh>Status</MudTh>

                <MudTh>CreatedOn</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nr">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Licence.LicenceType</MudTd>
                <MudTd DataLabel="Name">@context.LicenceId</MudTd>
                <MudTd DataLabel="Name">@context.Licence.CompanyName</MudTd>
                <MudTd DataLabel="Name">@context.Licence.MineralType</MudTd>
                <MudTd DataLabel="Name">@context.StartedOn.ToShortDateString()</MudTd>
                <MudTd DataLabel="Name">@context.TaskActualOwner</MudTd>
                <MudTd DataLabel="Region">@context.WorkFlowName</MudTd>
                <MudTd DataLabel="Active">@if (context.Status)
                    {

                        <MudChip Label="true" Color="Color.Success">APPROVED</MudChip>

                    }
                    else
                    {

                        <MudChip Label="true" Color="Color.Warning">PENDING</MudChip>

                    }
                </MudTd>
                <MudTd DataLabel="CreatedOn">@context.CreatedOn</MudTd>
                <MudTd DataLabel="Actions">

                    <MudIconButton Icon="@Icons.Filled.RemoveRedEye" Href="@($"/licenceworkflows/detail/{context.Id}")"
                        Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />


                    <MudButton Variant="Variant.Outlined" @onclick="(()=>UnClaim(context.Id))" Color="Color.Error"
                        class="ml-1" Size="Size.Small">UnClaim
                    </MudButton>

                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

   
  <br>

        <MudTable Loading="loadingClaim" Items="@ClaimWorkflows" Dense="true" Hover="@true" Bordered="true"
            Striped="true" Filter="new Func<LicenceWorkFlowDto,bool>(FilterUnClaimFunc1)"
            @bind-SelectedItem="searchselectedItem1">
            <ToolBarContent>
                <MudText Typo="Typo.h6">To Claim</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchClaimString1" Placeholder="Search" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Licence Type</MudTh>
                <MudTh>Licence #</MudTh>
                <MudTh>Company</MudTh>
                <MudTh>Mineral Type</MudTh>
                <MudTh>Issue Date</MudTh>
                <MudTh>Expire Date</MudTh>
                <MudTh>Licence Status</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>CreatedOn</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nr">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Licence.LicenceType</MudTd>
                <MudTd DataLabel="Name">@context.LicenceId</MudTd>
                <MudTd DataLabel="Name">@context.Licence.CompanyName</MudTd>
                <MudTd DataLabel="Name">@context.Licence.MineralType</MudTd>
                <MudTd DataLabel="Name">@context.Licence.LicenceStartDate.Value.ToShortDateString()</MudTd>
                <MudTd DataLabel="Name">@context.Licence.LicenceEndDate.ToShortDateString()</MudTd>
                <MudTd DataLabel="Region">@context.WorkFlowName</MudTd>
                <MudTd DataLabel="Active">@if (context.Status)
                    {

                        <MudChip Label="true" Color="Color.Success">APPROVED</MudChip>

                    }
                    else
                    {

                        <MudChip Label="true" Color="Color.Warning">PENDING</MudChip>

                    }
                </MudTd>
                <MudTd DataLabel="CreatedOn">@context.CreatedOn</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton class="mr-2" Icon="@Icons.Filled.RemoveRedEye"
                        Href="@($"/licenceworkflows/detail/{context.Id}")" Variant="Variant.Outlined"
                        Color="Color.Primary" Size="Size.Small" />


                    <MudButton Variant="Variant.Outlined" @onclick="(()=>Claim(context.Id))" Color="Color.Success"
                        Size="Size.Small">Claim
                    </MudButton>


                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

</div>
      </div>

@code {

    private bool bordered = false;
    private bool loading = true;
    private bool loadingClaim = true;
    private string searchString1 = "";
    private string searchClaimString1 = "";
    private LicenceWorkFlowDto selectedItem1 = null;
    private LicenceWorkFlowDto searchselectedItem1 = null;
    private HashSet<LicenceWorkFlowDto> selectedItems = new HashSet<LicenceWorkFlowDto>();
    DialogOptions maxWidth = new DialogOptions()
    {
        MaxWidth = MaxWidth.Large,
        FullWidth = true,
        Position = DialogPosition.TopCenter
    };

    private List<LicenceWorkFlowDto> Workflows = new List<LicenceWorkFlowDto>();
    private List<LicenceWorkFlowDto> ClaimWorkflows = new List<LicenceWorkFlowDto>();
    private async Task OpenCreateForm(int? id = null)
    {
        IDialogReference dialog;
        var parameters = new DialogParameters();
        if (id != null)
        {
            parameters.Add("Id", id.Value);
            parameters.Add("ButtonText", "Update Licence");
            dialog = Dialog.Show<Create>("Update Licence", parameters, maxWidth);
        }
        else
        {
            parameters.Add("ButtonText", "Register Licence");

            dialog = Dialog.Show<Create>("Add New Licence", parameters, maxWidth);
        }
        var result = await dialog.Result;




    }
    protected override async Task OnInitializedAsync()
    {
        await Tasks();
        await ToClaims();


    }

    private async Task Tasks()
    {
        loading = true;
        StateHasChanged();
        Workflows = await licenceWorkflowService.GetAll($"{EndPoints.LicenceWorkflowEndPoint}GetTaskLicences");
        loading = false;
    }

    private async Task ToClaims()
    {
        loadingClaim = true;
        StateHasChanged();
        ClaimWorkflows = await licenceWorkflowService.GetAll($"{EndPoints.LicenceWorkflowEndPoint}GetToClaimLicences");
        loadingClaim = false;
    }

    private async Task Refresh()
    {
        await ToClaims();
        await Tasks();
    }

    private async Task Claim(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to claim thise task?");
        parameters.Add("ButtonText", "Claim");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large };

        var dialog = Dialog.Show<ConfirmDialog>("Claim Task", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {

            await licenceWorkflowService.Update($"{EndPoints.LicenceWorkflowEndPoint}ClaimTask/", null, id);
            await Refresh();
            snackbarService.Add("Successfully Claimed Task", Severity.Success);




        }
    }
    private async Task UnClaim(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to unclaim thise task?");
        parameters.Add("ButtonText", "UnClaim");
        parameters.Add("Color", Color.Warning);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialog = Dialog.Show<ConfirmDialog>("UnClaim Task", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            loading = true;
            await licenceWorkflowService.Update($"{EndPoints.LicenceWorkflowEndPoint}UnClaimTask/", null, id);
            await Refresh();
            snackbarService.Add("Successfully UnClaimed Task", Severity.Success);



        }
    }

    private bool FilterFunc1(LicenceWorkFlowDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(LicenceWorkFlowDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Licence.CompanyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private bool FilterUnClaimFunc1(LicenceWorkFlowDto element) => FilterUnClaimFunc(element, searchString1);

    private bool FilterUnClaimFunc(LicenceWorkFlowDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Licence.CompanyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }


    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
