@page "/licencetypes/index"
@inject IJSRuntime jsRuntime
@inject IDialogService Dialog
@inject IHttpRepository<LicenceTypeDto> licenceTypeService
@inject HttpInerceptorService _interceptor
@inject IDialogService Dialog
@inject ISnackbar snackbarService
@attribute [Authorize]

@implements IDisposable

<div class="nk-content-body">
    <div class="nk-block-head nk-block-head-sm">
        <div class="nk-block-between">
            <div class="nk-block-head-content">
                <h3 class="nk-block-title page-title">Licence Types</h3>
            </div><!-- .nk-block-head-content -->
            <div class="nk-block-head-content">
                <div class="toggle-wrap nk-block-tools-toggle">
                    <a href="#" class="btn btn-icon btn-trigger toggle-expand me-n1" data-target="pageMenu"><em
                            class="icon ni ni-more-v"></em></a>
                    <div class="toggle-expand-content" data-content="pageMenu">
                        <ul class="nk-block-tools g-3">
                            <li>
                                <div class="drodown">
                                    <a href="#" class="dropdown-toggle btn btn-white btn-dim btn-outline-light"
                                        data-bs-toggle="dropdown"><em
                                            class="d-none d-sm-inline icon ni ni-calender-date"></em><span><span
                                                class="d-none d-md-inline">Import</span> Excel</span><em
                                            class="dd-indc icon ni ni-chevron-right"></em></a>
                                    <div class="dropdown-menu dropdown-menu-end">
                                        <ul class="link-list-opt no-bdr">
                                            <li><a href="#"><span>Last 30 Days</span></a></li>
                                            <li><a href="#"><span>Last 6 Months</span></a></li>
                                            <li><a href="#"><span>Last 1 Years</span></a></li>
                                        </ul>
                                    </div>
                                </div>
                            </li>
                            <li class="nk-block-tools-opt"><button @onclick="(()=>OpenCreateForm(null))"
                                    class="btn btn-primary"><em class="icon ni ni-plus"></em><span>Add</span></button>
                            </li>
                        </ul>
                    </div>
                </div>
            </div><!-- .nk-block-head-content -->
        </div><!-- .nk-block-between -->
    </div><!-- .nk-block-head -->
    <div class="nk-block">
        <MudTable Loading="loading" Items="@LicenceTypes" Dense="true" Hover="@hover" Bordered="@bordered"
            Striped="@striped" Filter="new Func<LicenceTypeDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
            <ToolBarContent>
                <MudText Typo="Typo.h6">List</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Code</MudTh>
                <MudTh>Terms</MudTh>
                <MudTh>Period</MudTh>
                <MudTh>Period Type</MudTh>
                <MudTh>Active</MudTh>
                <MudTh>CreatedBy</MudTh>
                <MudTh>CreatedOn</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nr">@context.Id</MudTd>
                <MudTd DataLabel="Region">@context.Name</MudTd>
                <MudTd DataLabel="Region">@context.Code</MudTd>
                <MudTd DataLabel="Name">@context.TermOfLicence</MudTd>
                <MudTd DataLabel="Name">@context.LicencePeriod</MudTd>
                <MudTd DataLabel="Name">@context.LicencePeriodType</MudTd>
                <MudTd DataLabel="Active">@context.Active</MudTd>
                <MudTd DataLabel="CreatedBy">@context.CreatedBy</MudTd>
                <MudTd DataLabel="CreatedOn">@context.CreatedOn</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="(()=>Delete(context.Id))" Variant="Variant.Outlined" Color="Color.Error"
                        Size="Size.Small" />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="(()=>OpenCreateForm(id:context.Id))"
                        Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />

                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

    </div>
</div>


@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private bool loading = true;
    private string searchString1 = "";
    private LicenceTypeDto selectedItem1 = null;
    private HashSet<LicenceTypeDto> selectedItems = new HashSet<LicenceTypeDto>();
    DialogOptions maxWidth = new DialogOptions()
    {
        MaxWidth = MaxWidth.Large,
        FullWidth = true,
        Position = DialogPosition.TopCenter
    };

         private async Task Delete(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete these records?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = Dialog.Show<ConfirmDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            System.Console.WriteLine("Hello");
            await licenceTypeService.Delete($"{EndPoints.LicenceTypesEndPoint}", id);
            snackbarService.Add("Successfully Deleted Record", Severity.Success);
            await OnInitializedAsync();
        }
    }

    private List<LicenceTypeDto> LicenceTypes = new List<LicenceTypeDto>();

    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        LicenceTypes = await licenceTypeService.GetAll($"{EndPoints.LicenceTypesEndPoint}");
        loading = false;
    }

    private async Task OpenCreateForm(int? id)
    {
        IDialogReference dialog;
        var parameters = new DialogParameters();
        if (id != null)
        {
            parameters.Add("Id", id.Value);
            parameters.Add("ButtonText", "Update Licence");
            dialog = Dialog.Show<Create>("Update Licence", parameters, maxWidth);
        }
        else
        {
            parameters.Add("ButtonText", "Register Licence Type");

            dialog = Dialog.Show<Create>("Add New Licence Type", parameters, maxWidth);
        }
        var result = await dialog.Result;
        await OnInitializedAsync();
    }

    private bool FilterFunc1(LicenceTypeDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(LicenceTypeDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
