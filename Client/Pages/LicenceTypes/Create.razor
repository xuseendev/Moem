@inject IHttpRepository<CreateLicenceTypeDto> licenceTypeService
@inject ISnackbar snackbarService
@inject IHttpRepository<LookUpLicenceTypeTemplate> lookupService
<EditForm Model="@model" OnValidSubmit="CreateLicenceType">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>

                    <MudItem xs="12">
                        <MudGrid>
                            <MudItem xs="4">

                                <MudTextField Label="Name" HelperText="Max. 12 characters" @bind-Value="model.Name"
                                    Variant="Variant.Outlined" class="mb-3" For="@(() => model.Name)" />
                            </MudItem>
   <MudItem xs="4">

                                <MudTextField Label="Code" HelperText="Max. 3 characters" @bind-Value="model.Code"
                                    Variant="Variant.Outlined" class="mb-3" For="@(() => model.Code)" />
                            </MudItem>

                            <MudItem xs="4">
                                <MudTextField Label="Term Of Licence" @bind-Value="model.TermOfLicence"
                                    Variant="Variant.Outlined" class="mb-3" For="@(() => model.TermOfLicence)" />
                            </MudItem>
                        </MudGrid>
                    </MudItem>

                    <MudItem xs="12">
                        <MudGrid>
                            <MudItem xs="3">

                                <MudTextField Label="Licence Period" HelperText="Max. 12 number"
                                    @bind-Value="model.LicencePeriod" Variant="Variant.Outlined" class="mb-3"
                                    For="@(() => model.LicencePeriod)" />
                            </MudItem>


                            <MudItem xs="3">
                                <MudSelect T="string" Label="Licence Period Type" @bind-Value="model.LicencePeriodType"
                                    AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" class="mb-3"
                                    For="@(() => model.LicencePeriodType)">

                                    @foreach (var type in LicencePeriodTypes)
                                    {
                                        <MudSelectItem Value="@(type)">@type</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="3">
                                <MudSelect T="int" Label="Licence Template" @bind-Value="model.LicenceTypeTemplateId"
                                    AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" class="mb-3"
                                    For="@(() => model.LicenceTypeTemplateId)">

                                    @foreach (var type in LicenceTemplates)
                                    {
                                        <MudSelectItem Value="@(type.Id)">@type.Title</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="2">
                                <MudCheckBox @bind-Checked="@model.Active" Size="Size.Small" Color="Color.Tertiary">
                                    Active
                                </MudCheckBox>
                            </MudItem>
                        </MudGrid>
                    </MudItem>

                    <MudItem xs="12">
                        <MudGrid>
                            <MudItem xs="12">

                                <MudTextField Lines="5" Label="Description" @bind-Value="model.Description"
                                    Variant="Variant.Outlined" class="mb-3" For="@(() => model.Description)" />
                            </MudItem>




                        </MudGrid>
                    </MudItem>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@loading" Variant="Variant.Filled"
                        Color="Color.Primary" class="ml-auto">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>@ButtonText</MudText>
                        }
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Error" Class="ml-1">
                        Reset</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    CreateLicenceTypeDto model = new CreateLicenceTypeDto();
    bool loading = false;
    [Parameter]
    public string ButtonText { get; set; }
    [Parameter]
    public EventCallback Areas { get; set; }

    [Parameter]
    public int? Id { get; set; }
    private List<string> LicencePeriodTypes = new List<string>(){
"Year",
"Month"
};
    private async Task CreateLicenceType()
    {
        loading = true;
        Console.WriteLine("Hello");
         if (Id == null)
        {

            await licenceTypeService.Post($"{EndPoints.LicenceTypesEndPoint}", model);
        SnackMessage("Succesfully Saved Record", Severity.Success);
        }
        else
        {
            model.Id = Id.Value;
            await licenceTypeService.Update($"{EndPoints.LicenceTypesEndPoint}", model, Id.Value);
            SnackMessage("Succesfully Updated Record", Severity.Success);
        }
        //await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully Updated");
       
        await Areas.InvokeAsync();
        model = new CreateLicenceTypeDto();
        loading = false;

    }

 

    private List<LookUpLicenceTypeTemplate> LicenceTemplates = new List<LookUpLicenceTypeTemplate>();
    protected async override Task OnParametersSetAsync()
    {
        if (Id.HasValue)
            model = await licenceTypeService.Get($"{EndPoints.LicenceTypesEndPoint}", Id.Value);

        LicenceTemplates = await lookupService.GetAll($"{EndPoints.LicenceTypesTemplateEndPoint}");
    }

    private void SnackMessage(string text, Severity type)
    {
        snackbarService.Add(text, type);
    }

}
